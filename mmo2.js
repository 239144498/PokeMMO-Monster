const API_URL = 'https://mmo.ydev.tech/monster/current';
const REFRESH_INTERVAL = 10 * 60 * 1000; // 10分钟
let lastFetchTime = 0;

// 修改fetchMonsterData函数，使用localStorage作为缓存
async function fetchMonsterData() {
    const CACHE_KEY = 'pokemmo_monster_data';
    const CACHE_DURATION = 30 * 60 * 1000; // 30分钟缓存时间

    try {
        // 检查是否有缓存数据
        const cachedData = localStorage.getItem(CACHE_KEY);
        if (cachedData) {
            const cache = JSON.parse(cachedData);
            // 检查缓存是否过期
            if (Date.now() - cache.timestamp < CACHE_DURATION) {
                console.log('使用缓存数据，剩余有效期：',
                    Math.floor((CACHE_DURATION - (Date.now() - cache.timestamp)) / 60000), '分钟');
                return cache.data;
            }
        }

        // 缓存不存在或已过期，从API获取新数据
        const response = await fetch(API_URL);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        // 数据格式转换，确保与现有结构匹配
        const formattedData = data.map(item => ({
            ...item,
            // 确保时间相关字段为数字类型
            startHour: parseInt(item.startHour),
            startMinute: parseInt(item.startMinute),
            endHour: parseInt(item.endHour),
            endMinute: parseInt(item.endMinute),
            // 确保 ID 相关字段为数字类型
            monsterId: parseInt(item.monsterId),
            regionId: parseInt(item.regionId),
            move1Id: parseInt(item.move1Id),
            move2Id: parseInt(item.move2Id),
            move3Id: parseInt(item.move3Id),
            move4Id: parseInt(item.move4Id),
            alphaTimeId: parseInt(item.alphaTimeId)
        }));

        // 保存到缓存
        localStorage.setItem(CACHE_KEY, JSON.stringify({
            timestamp: Date.now(),
            data: formattedData
        }));
        return formattedData;
    } catch (error) {
        console.error('获取数据失败:', error);

        // 获取失败时，尝试使用过期的缓存数据
        const expiredCache = localStorage.getItem(CACHE_KEY);
        if (expiredCache) {
            console.warn('使用过期的缓存数据');
            return JSON.parse(expiredCache).data;
        }

        // 如果连过期数据都没有，使用默认数据
        return null;
    }
}

function shouldRefreshData() {
    const now = Date.now();
    return !lastFetchTime || (now - lastFetchTime) >= REFRESH_INTERVAL;
}

const regionNames = {
    0: "关都",
    1: "丰源",
    2: "合众",
    3: "神奥",
    4: "城都"
};

// 模拟数据加载 - 这里我们直接使用硬编码的数据
const monsterData = [
    {
        "userId": "1881316780629635074",
        "userIgn": "XDGGDD",
        "date": "2025-02-21",
        "startHour": 15,
        "startMinute": 29,
        "endHour": 16,
        "endMinute": 44,
        "timeUncheck": false,
        "monsterId": 49,
        "regionId": 0,
        "locationName": "10号道路",
        "hmId": 0,
        "move1Id": 405,
        "move2Id": 390,
        "move3Id": 18,
        "move4Id": 355,
        "alphaTimeId": 2,
        "text": "[09:29~~10:44][头目:摩鲁蛾][梦特:奇迹皮肤]虫鸣, 毒菱, 吹飞, 羽栖[10号道路][报点人:XDGGDD]",
        "itemCosmeticConfigUrl": "https://cdn.api.pokemmo.com.cn/static/dress/2/2/0/2174/0/1443/0/0/1312d7/0/1317d7/1326d0/2241.png"
    },
    {
        "id": "1892725672005677057",
        "userId": "1881316780629635074",
        "userIgn": "XDGGDD",
        "date": "2025-02-21",
        "startHour": 4,
        "startMinute": 47,
        "endHour": 6,
        "endMinute": 2,
        "timeUncheck": false,
        "monsterId": 264,
        "regionId": 1,
        "locationName": "102号道路",
        "hmId": 0,
        "move1Id": 34,
        "move2Id": 402,
        "move3Id": 421,
        "move4Id": 187,
        "alphaTimeId": 1,
        "text": "[04:47~~06:02][头目:直冲熊][梦特:飞毛腿]泰山压顶, 种子炸弹, 暗影爪, 腹鼓[102号道路][报点人:XDGGDD]",
        "itemCosmeticConfigUrl": "https://cdn.api.pokemmo.com.cn/static/dress/2/2/0/2174/0/1443/0/0/1312d7/0/1317d7/1326d0/2241.png"
    },
];

// 宝可梦数据
const pokemonTypes = {1: {'name': '妙蛙种子'}, 2: {'name': '妙蛙草'}, 3: {'name': '妙蛙花'}, 4: {'name': '小火龙'}, 5: {'name': '火恐龙'}, 6: {'name': '喷火龙'}, 7: {'name': '杰尼龟'}, 8: {'name': '卡咪龟'}, 9: {'name': '水箭龟'}, 10: {'name': '绿毛虫'}, 11: {'name': '铁甲蛹'}, 12: {'name': '巴大蝶'}, 13: {'name': '独角虫'}, 14: {'name': '铁壳蛹'}, 15: {'name': '大针蜂'}, 16: {'name': '波波'}, 17: {'name': '比比鸟'}, 18: {'name': '大比鸟'}, 19: {'name': '小拉达'}, 20: {'name': '拉达'}, 21: {'name': '烈雀'}, 22: {'name': '大嘴雀'}, 23: {'name': '阿柏蛇'}, 24: {'name': '阿柏怪'}, 25: {'name': '皮卡丘'}, 26: {'name': '雷丘'}, 27: {'name': '穿山鼠'}, 28: {'name': '穿山王'}, 29: {'name': '尼多兰'}, 30: {'name': '尼多娜'}, 31: {'name': '尼多后'}, 32: {'name': '尼多朗'}, 33: {'name': '尼多力诺'}, 34: {'name': '尼多王'}, 35: {'name': '皮皮'}, 36: {'name': '皮可西'}, 37: {'name': '六尾'}, 38: {'name': '九尾'}, 39: {'name': '胖丁'}, 40: {'name': '胖可丁'}, 41: {'name': '超音蝠'}, 42: {'name': '大嘴蝠'}, 43: {'name': '走路草'}, 44: {'name': '臭臭花'}, 45: {'name': '霸王花'}, 46: {'name': '派拉斯'}, 47: {'name': '派拉斯特'}, 48: {'name': '毛球'}, 49: {'name': '摩鲁蛾'}, 50: {'name': '地鼠'}, 51: {'name': '三地鼠'}, 52: {'name': '喵喵'}, 53: {'name': '猫老大'}, 54: {'name': '可达鸭'}, 55: {'name': '哥达鸭'}, 56: {'name': '猴怪'}, 57: {'name': '火暴猴'}, 58: {'name': '卡蒂狗'}, 59: {'name': '风速狗'}, 60: {'name': '蚊香蝌蚪'}, 61: {'name': '蚊香君'}, 62: {'name': '蚊香泳士'}, 63: {'name': '凯西'}, 64: {'name': '勇基拉'}, 65: {'name': '胡地'}, 66: {'name': '腕力'}, 67: {'name': '豪力'}, 68: {'name': '怪力'}, 69: {'name': '喇叭芽'}, 70: {'name': '口呆花'}, 71: {'name': '大食花'}, 72: {'name': '玛瑙水母'}, 73: {'name': '毒刺水母'}, 74: {'name': '小拳石'}, 75: {'name': '隆隆石'}, 76: {'name': '隆隆岩'}, 77: {'name': '小火马'}, 78: {'name': '烈焰马'}, 79: {'name': '呆呆兽'}, 80: {'name': '呆壳兽'}, 81: {'name': '小磁怪'}, 82: {'name': '三合一磁怪'}, 83: {'name': '大葱鸭'}, 84: {'name': '嘟嘟'}, 85: {'name': '嘟嘟利'}, 86: {'name': '小海狮'}, 87: {'name': '白海狮'}, 88: {'name': '臭泥'}, 89: {'name': '臭臭泥'}, 90: {'name': '大舌贝'}, 91: {'name': '刺甲贝'}, 92: {'name': '鬼斯'}, 93: {'name': '鬼斯通'}, 94: {'name': '耿鬼'}, 95: {'name': '大岩蛇'}, 96: {'name': '催眠貘'}, 97: {'name': '引梦貘人'}, 98: {'name': '大钳蟹'}, 99: {'name': '巨钳蟹'}, 100: {'name': '霹雳电球'}, 101: {'name': '顽皮雷弹'}, 102: {'name': '蛋蛋'}, 103: {'name': '椰蛋树'}, 104: {'name': '卡拉卡拉'}, 105: {'name': '嘎啦嘎啦'}, 106: {'name': '飞腿郎'}, 107: {'name': '快拳郎'}, 108: {'name': '大舌头'}, 109: {'name': '瓦斯弹'}, 110: {'name': '双弹瓦斯'}, 111: {'name': '独角犀牛'}, 112: {'name': '钻角犀兽'}, 113: {'name': '吉利蛋'}, 114: {'name': '蔓藤怪'}, 115: {'name': '袋兽'}, 116: {'name': '墨海马'}, 117: {'name': '海刺龙'}, 118: {'name': '角金鱼'}, 119: {'name': '金鱼王'}, 120: {'name': '海星星'}, 121: {'name': '宝石海星'}, 122: {'name': '魔墙人偶'}, 123: {'name': '飞天螳螂'}, 124: {'name': '迷唇姐'}, 125: {'name': '电击兽'}, 126: {'name': '鸭嘴火兽'}, 127: {'name': '凯罗斯'}, 128: {'name': '肯泰罗'}, 129: {'name': '鲤鱼王'}, 130: {'name': '暴鲤龙'}, 131: {'name': '拉普拉斯'}, 132: {'name': '百变怪'}, 133: {'name': '伊布'}, 134: {'name': '水伊布'}, 135: {'name': '雷伊布'}, 136: {'name': '火伊布'}, 137: {'name': '多边兽'}, 138: {'name': '菊石兽'}, 139: {'name': '多刺菊石兽'}, 140: {'name': '化石盔'}, 141: {'name': '镰刀盔'}, 142: {'name': '化石翼龙'}, 143: {'name': '卡比兽'}, 144: {'name': '急冻鸟'}, 145: {'name': '闪电鸟'}, 146: {'name': '火焰鸟'}, 147: {'name': '迷你龙'}, 148: {'name': '哈克龙'}, 149: {'name': '快龙'}, 150: {'name': '超梦'}, 151: {'name': '梦幻'}, 152: {'name': '菊草叶'}, 153: {'name': '月桂叶'}, 154: {'name': '大竺葵'}, 155: {'name': '火球鼠'}, 156: {'name': '火岩鼠'}, 157: {'name': '火暴兽'}, 158: {'name': '小锯鳄'}, 159: {'name': '蓝鳄'}, 160: {'name': '大力鳄'}, 161: {'name': '尾立'}, 162: {'name': '大尾立'}, 163: {'name': '咕咕'}, 164: {'name': '猫头夜鹰'}, 165: {'name': '芭瓢虫'}, 166: {'name': '安瓢虫'}, 167: {'name': '圆丝蛛'}, 168: {'name': '阿利多斯'}, 169: {'name': '叉字蝠'}, 170: {'name': '灯笼鱼'}, 171: {'name': '电灯怪'}, 172: {'name': '皮丘'}, 173: {'name': '皮宝宝'}, 174: {'name': '宝宝丁'}, 175: {'name': '波克比'}, 176: {'name': '波克基古'}, 177: {'name': '天然雀'}, 178: {'name': '天然鸟'}, 179: {'name': '咩利羊'}, 180: {'name': '茸茸羊'}, 181: {'name': '电龙'}, 182: {'name': '美丽花'}, 183: {'name': '玛力露'}, 184: {'name': '玛力露丽'}, 185: {'name': '树才怪'}, 186: {'name': '蚊香蛙皇'}, 187: {'name': '毽子草'}, 188: {'name': '毽子花'}, 189: {'name': '毽子棉'}, 190: {'name': '长尾怪手'}, 191: {'name': '向日种子'}, 192: {'name': '向日花怪'}, 193: {'name': '蜻蜻蜓'}, 194: {'name': '乌波'}, 195: {'name': '沼王'}, 196: {'name': '太阳伊布'}, 197: {'name': '月亮伊布'}, 198: {'name': '黑暗鸦'}, 199: {'name': '呆呆王'}, 200: {'name': '梦妖'}, 201: {'name': '未知图腾'}, 202: {'name': '果然翁'}, 203: {'name': '麒麟奇'}, 204: {'name': '榛果球'}, 205: {'name': '佛烈托斯'}, 206: {'name': '土龙弟弟'}, 207: {'name': '天蝎'}, 208: {'name': '大钢蛇'}, 209: {'name': '布鲁'}, 210: {'name': '布鲁皇'}, 211: {'name': '千针鱼'}, 212: {'name': '巨钳螳螂'}, 213: {'name': '壶壶'}, 214: {'name': '赫拉克罗斯'}, 215: {'name': '狃拉'}, 216: {'name': '熊宝宝'}, 217: {'name': '圈圈熊'}, 218: {'name': '熔岩虫'}, 219: {'name': '熔岩蜗牛'}, 220: {'name': '小山猪'}, 221: {'name': '长毛猪'}, 222: {'name': '太阳珊瑚'}, 223: {'name': '铁炮鱼'}, 224: {'name': '章鱼桶'}, 225: {'name': '信使鸟'}, 226: {'name': '巨翅飞鱼'}, 227: {'name': '盔甲鸟'}, 228: {'name': '戴鲁比'}, 229: {'name': '黑鲁加'}, 230: {'name': '刺龙王'}, 231: {'name': '小小象'}, 232: {'name': '顿甲'}, 233: {'name': '多边兽2'}, 234: {'name': '惊角鹿'}, 235: {'name': '图图犬'}, 236: {'name': '无畏小子'}, 237: {'name': '战舞郎'}, 238: {'name': '迷唇娃'}, 239: {'name': '电击怪'}, 240: {'name': '鸭嘴宝宝'}, 241: {'name': '大奶罐'}, 242: {'name': '幸福蛋'}, 243: {'name': '雷公'}, 244: {'name': '炎帝'}, 245: {'name': '水君'}, 246: {'name': '幼基拉斯'}, 247: {'name': '沙基拉斯'}, 248: {'name': '班基拉斯'}, 249: {'name': '洛奇亚'}, 250: {'name': '凤王'}, 251: {'name': '时拉比'}, 252: {'name': '木守宫'}, 253: {'name': '森林蜥蜴'}, 254: {'name': '蜥蜴王'}, 255: {'name': '火稚鸡'}, 256: {'name': '力壮鸡'}, 257: {'name': '火焰鸡'}, 258: {'name': '水跃鱼'}, 259: {'name': '沼跃鱼'}, 260: {'name': '巨沼怪'}, 261: {'name': '土狼犬'}, 262: {'name': '大狼犬'}, 263: {'name': '蛇纹熊'}, 264: {'name': '直冲熊'}, 265: {'name': '刺尾虫'}, 266: {'name': '甲壳茧'}, 267: {'name': '狩猎凤蝶'}, 268: {'name': '盾甲茧'}, 269: {'name': '毒粉蛾'}, 270: {'name': '莲叶童子'}, 271: {'name': '莲帽小童'}, 272: {'name': '乐天河童'}, 273: {'name': '橡实果'}, 274: {'name': '长鼻叶'}, 275: {'name': '狡猾天狗'}, 276: {'name': '傲骨燕'}, 277: {'name': '大王燕'}, 278: {'name': '长翅鸥'}, 279: {'name': '大嘴鸥'}, 280: {'name': '拉鲁拉丝'}, 281: {'name': '奇鲁莉安'}, 282: {'name': '沙奈朵'}, 282101: {'name': '超级沙奈朵'}, 283: {'name': '溜溜糖球'}, 284: {'name': '雨翅蛾'}, 285: {'name': '蘑蘑菇'}, 286: {'name': '斗笠菇'}, 287: {'name': '懒人獭'}, 288: {'name': '过动猿'}, 289: {'name': '请假王'}, 290: {'name': '土居忍士'}, 291: {'name': '铁面忍者'}, 292: {'name': '脱壳忍者'}, 293: {'name': '咕妞妞'}, 294: {'name': '吼爆弹'}, 295: {'name': '爆音怪'}, 296: {'name': '幕下力士'}, 297: {'name': '铁掌力士'}, 298: {'name': '露力丽'}, 299: {'name': '朝北鼻'}, 300: {'name': '向尾喵'}, 301: {'name': '优雅猫'}, 302: {'name': '勾魂眼'}, 303: {'name': '大嘴娃'}, 304: {'name': '可可多拉'}, 305: {'name': '可多拉'}, 306: {'name': '波士可多拉'}, 307: {'name': '玛沙那'}, 308: {'name': '恰雷姆'}, 309: {'name': '落雷兽'}, 310: {'name': '雷电兽'}, 311: {'name': '正电拍拍'}, 312: {'name': '负电拍拍'}, 313: {'name': '电萤虫'}, 314: {'name': '甜甜萤'}, 315: {'name': '毒蔷薇'}, 316: {'name': '溶食兽'}, 317: {'name': '吞食兽'}, 318: {'name': '利牙鱼'}, 319: {'name': '巨牙鲨'}, 320: {'name': '吼吼鲸'}, 321: {'name': '吼鲸王'}, 322: {'name': '呆火驼'}, 323: {'name': '喷火驼'}, 324: {'name': '煤炭龟'}, 325: {'name': '跳跳猪'}, 326: {'name': '噗噗猪'}, 327: {'name': '晃晃斑'}, 328: {'name': '大颚蚁'}, 329: {'name': '超音波幼虫'}, 330: {'name': '沙漠蜻蜓'}, 331: {'name': '刺球仙人掌'}, 332: {'name': '梦歌仙人掌'}, 333: {'name': '青绵鸟'}, 334: {'name': '七夕青鸟'}, 335: {'name': '猫鼬斩'}, 336: {'name': '饭匙蛇'}, 337: {'name': '月石'}, 338: {'name': '太阳岩'}, 339: {'name': '泥泥鳅'}, 340: {'name': '鲶鱼王'}, 341: {'name': '龙虾小兵'}, 342: {'name': '铁螯龙虾'}, 343: {'name': '天秤偶'}, 344: {'name': '念力土偶'}, 345: {'name': '触手百合'}, 346: {'name': '摇篮百合'}, 347: {'name': '太古羽虫'}, 348: {'name': '太古盔甲'}, 349: {'name': '丑丑鱼'}, 350: {'name': '美纳斯'}, 351: {'name': '飘浮泡泡'}, 352: {'name': '变隐龙'}, 353: {'name': '怨影娃娃'}, 354: {'name': '诅咒娃娃'}, 355: {'name': '夜巡灵'}, 356: {'name': '彷徨夜灵'}, 357: {'name': '热带龙'}, 358: {'name': '风铃铃'}, 359: {'name': '阿勃梭鲁'}, 360: {'name': '小果然'}, 361: {'name': '雪童子'}, 362: {'name': '冰鬼护'}, 363: {'name': '海豹球'}, 364: {'name': '海魔狮'}, 365: {'name': '帝牙海狮'}, 366: {'name': '珍珠贝'}, 367: {'name': '猎斑鱼'}, 368: {'name': '樱花鱼'}, 369: {'name': '古空棘鱼'}, 370: {'name': '爱心鱼'}, 371: {'name': '宝贝龙'}, 372: {'name': '甲壳龙'}, 373: {'name': '暴飞龙'}, 374: {'name': '铁哑铃'}, 375: {'name': '金属怪'}, 376: {'name': '巨金怪'}, 377: {'name': '雷吉洛克'}, 378: {'name': '雷吉艾斯'}, 379: {'name': '雷吉斯奇鲁'}, 380: {'name': '拉帝亚斯'}, 381: {'name': '拉帝欧斯'}, 382: {'name': '盖欧卡'}, 383: {'name': '固拉多'}, 384: {'name': '烈空坐'}, 385: {'name': '基拉祈'}, 386: {'name': '代欧奇希斯'}, 387: {'name': '草苗龟'}, 388: {'name': '树林龟'}, 389: {'name': '土台龟'}, 390: {'name': '小火焰猴'}, 391: {'name': '猛火猴'}, 392: {'name': '烈焰猴'}, 393: {'name': '波加曼'}, 394: {'name': '波皇子'}, 395: {'name': '帝王拿波'}, 396: {'name': '姆克儿'}, 397: {'name': '姆克鸟'}, 398: {'name': '姆克鹰'}, 399: {'name': '大牙狸'}, 400: {'name': '大尾狸'}, 401: {'name': '圆法师'}, 402: {'name': '音箱蟀'}, 403: {'name': '小猫怪'}, 404: {'name': '勒克猫'}, 405: {'name': '伦琴猫'}, 406: {'name': '含羞苞'}, 407: {'name': '罗丝雷朵'}, 408: {'name': '头盖龙'}, 409: {'name': '战槌龙'}, 410: {'name': '盾甲龙'}, 411: {'name': '护城龙'}, 412: {'name': '结草儿'}, 413: {'name': '结草贵妇'}, 414: {'name': '绅士蛾'}, 415: {'name': '三蜜蜂'}, 416: {'name': '蜂女王'}, 417: {'name': '帕奇利兹'}, 418: {'name': '泳圈鼬'}, 419: {'name': '浮潜鼬'}, 420: {'name': '樱花宝'}, 421: {'name': '樱花儿'}, 422: {'name': '无壳海兔'}, 423: {'name': '海兔兽'}, 424: {'name': '双尾怪手'}, 425: {'name': '飘飘球'}, 426: {'name': '随风球'}, 427: {'name': '卷卷耳'}, 428: {'name': '长耳兔'}, 429: {'name': '梦妖魔'}, 430: {'name': '乌鸦头头'}, 431: {'name': '魅力喵'}, 432: {'name': '东施喵'}, 433: {'name': '铃铛响'}, 434: {'name': '臭鼬噗'}, 435: {'name': '坦克臭鼬'}, 436: {'name': '铜镜怪'}, 437: {'name': '青铜钟'}, 438: {'name': '盆才怪'}, 439: {'name': '魔尼尼'}, 440: {'name': '小福蛋'}, 441: {'name': '聒噪鸟'}, 442: {'name': '花岩怪'}, 443: {'name': '圆陆鲨'}, 444: {'name': '尖牙陆鲨'}, 445: {'name': '烈咬陆鲨'}, 446: {'name': '小卡比兽'}, 447: {'name': '利欧路'}, 448: {'name': '路卡利欧'}, 449: {'name': '沙河马'}, 450: {'name': '河马兽'}, 451: {'name': '钳尾蝎'}, 452: {'name': '龙王蝎'}, 453: {'name': '不良蛙'}, 454: {'name': '毒骷蛙'}, 455: {'name': '尖牙笼'}, 456: {'name': '荧光鱼'}, 457: {'name': '霓虹鱼'}, 458: {'name': '小球飞鱼'}, 459: {'name': '雪笠怪'}, 460: {'name': '暴雪王'}, 461: {'name': '玛狃拉'}, 462: {'name': '自爆磁怪'}, 463: {'name': '大舌舔'}, 464: {'name': '超甲狂犀'}, 465: {'name': '巨蔓藤'}, 466: {'name': '电击魔兽'}, 467: {'name': '鸭嘴炎兽'}, 468: {'name': '波克基斯'}, 469: {'name': '远古巨蜓'}, 470: {'name': '叶伊布'}, 471: {'name': '冰伊布'}, 472: {'name': '天蝎王'}, 473: {'name': '象牙猪'}, 474: {'name': '多边兽Z'}, 475: {'name': '艾路雷朵'}, 476: {'name': '大朝北鼻'}, 477: {'name': '黑夜魔灵'}, 478: {'name': '雪妖女'}, 479: {'name': '洛托姆'}, 479101: {'name': '加热洛托姆'}, 479102: {'name': '清洗洛托姆'}, 479103: {'name': '结冰洛托姆'}, 479104: {'name': '旋转洛托姆'}, 479105: {'name': '切割洛托姆'}, 480: {'name': '由克希'}, 481: {'name': '艾姆利多'}, 482: {'name': '亚克诺姆'}, 483: {'name': '帝牙卢卡'}, 484: {'name': '帕路奇亚'}, 485: {'name': '席多蓝恩'}, 486: {'name': '雷吉奇卡斯'}, 487: {'name': '骑拉帝纳'}, 488: {'name': '克雷色利亚'}, 489: {'name': '霏欧纳'}, 490: {'name': '玛纳霏'}, 491: {'name': '达克莱伊'}, 492: {'name': '谢米'}, 493: {'name': '阿尔宙斯'}, 494: {'name': '比克提尼'}, 495: {'name': '藤藤蛇'}, 496: {'name': '青藤蛇'}, 497: {'name': '君主蛇'}, 498: {'name': '暖暖猪'}, 499: {'name': '炒炒猪'}, 500: {'name': '炎武王'}, 501: {'name': '水水獭'}, 502: {'name': '双刃丸'}, 503: {'name': '大剑鬼'}, 504: {'name': '探探鼠'}, 505: {'name': '步哨鼠'}, 506: {'name': '小约克'}, 507: {'name': '哈约克'}, 508: {'name': '长毛狗'}, 509: {'name': '扒手猫'}, 510: {'name': '酷豹'}, 511: {'name': '花椰猴'}, 512: {'name': '花椰猿'}, 513: {'name': '爆香猴'}, 514: {'name': '爆香猿'}, 515: {'name': '冷水猴'}, 516: {'name': '冷水猿'}, 517: {'name': '食梦梦'}, 518: {'name': '梦梦蚀'}, 519: {'name': '豆豆鸽'}, 520: {'name': '咕咕鸽'}, 521: {'name': '高傲雉鸡'}, 522: {'name': '斑斑马'}, 523: {'name': '雷电斑马'}, 524: {'name': '石丸子'}, 525: {'name': '地幔岩'}, 526: {'name': '庞岩怪'}, 527: {'name': '滚滚蝙蝠'}, 528: {'name': '心蝙蝠'}, 529: {'name': '螺钉地鼠'}, 530: {'name': '龙头地鼠'}, 531: {'name': '差不多娃娃'}, 532: {'name': '搬运小匠'}, 533: {'name': '铁骨土人'}, 534: {'name': '修建老匠'}, 535: {'name': '圆蝌蚪'}, 536: {'name': '蓝蟾蜍'}, 537: {'name': '蟾蜍王'}, 538: {'name': '投摔鬼'}, 539: {'name': '打击鬼'}, 540: {'name': '虫宝包'}, 541: {'name': '宝包茧'}, 542: {'name': '保姆虫'}, 543: {'name': '百足蜈蚣'}, 544: {'name': '车轮球'}, 545: {'name': '蜈蚣王'}, 546: {'name': '木棉球'}, 547: {'name': '风妖精'}, 548: {'name': '百合根娃娃'}, 549: {'name': '裙儿小姐'}, 550: {'name': '野蛮鲈鱼'}, 551: {'name': '黑眼鳄'}, 552: {'name': '混混鳄'}, 553: {'name': '流氓鳄'}, 554: {'name': '火红不倒翁'}, 555: {'name': '达摩狒狒'}, 556: {'name': '沙铃仙人掌'}, 557: {'name': '石居蟹'}, 558: {'name': '岩殿居蟹'}, 559: {'name': '滑滑小子'}, 560: {'name': '头巾混混'}, 561: {'name': '象征鸟'}, 562: {'name': '哭哭面具'}, 563: {'name': '死神棺'}, 564: {'name': '原盖海龟'}, 565: {'name': '肋骨海龟'}, 566: {'name': '始祖小鸟'}, 567: {'name': '始祖大鸟'}, 568: {'name': '破破袋'}, 569: {'name': '灰尘山'}, 570: {'name': '索罗亚'}, 571: {'name': '索罗亚克'}, 572: {'name': '泡沫栗鼠'}, 573: {'name': '奇诺栗鼠'}, 574: {'name': '哥德宝宝'}, 575: {'name': '哥德小童'}, 576: {'name': '哥德小姐'}, 577: {'name': '单卵细胞球'}, 578: {'name': '双卵细胞球'}, 579: {'name': '人造细胞卵'}, 580: {'name': '鸭宝宝'}, 581: {'name': '舞天鹅'}, 582: {'name': '迷你冰'}, 583: {'name': '多多冰'}, 584: {'name': '双倍多多冰'}, 585: {'name': '四季鹿'}, 586: {'name': '萌芽鹿'}, 587: {'name': '电飞鼠'}, 588: {'name': '盖盖虫'}, 589: {'name': '骑士蜗牛'}, 590: {'name': '哎呀球菇'}, 591: {'name': '败露球菇'}, 592: {'name': '轻飘飘'}, 593: {'name': '胖嘟嘟'}, 594: {'name': '保姆曼波'}, 595: {'name': '电电虫'}, 596: {'name': '电蜘蛛'}, 597: {'name': '种子铁球'}, 598: {'name': '坚果哑铃'}, 599: {'name': '齿轮儿'}, 600: {'name': '齿轮组'}, 601: {'name': '齿轮怪'}, 602: {'name': '麻麻小鱼'}, 603: {'name': '麻麻鳗'}, 604: {'name': '麻麻鳗鱼王'}, 605: {'name': '小灰怪'}, 606: {'name': '大宇怪'}, 607: {'name': '烛光灵'}, 608: {'name': '灯火幽灵'}, 609: {'name': '水晶灯火灵'}, 610: {'name': '牙牙'}, 611: {'name': '斧牙龙'}, 612: {'name': '双斧战龙'}, 613: {'name': '喷嚏熊'}, 614: {'name': '冻原熊'}, 615: {'name': '几何雪花'}, 616: {'name': '小嘴蜗'}, 617: {'name': '敏捷虫'}, 618: {'name': '泥巴鱼'}, 619: {'name': '功夫鼬'}, 620: {'name': '师父鼬'}, 621: {'name': '赤面龙'}, 622: {'name': '泥偶小人'}, 623: {'name': '泥偶巨人'}, 624: {'name': '驹刀小兵'}, 625: {'name': '劈斩司令'}, 626: {'name': '爆炸头水牛'}, 627: {'name': '毛头小鹰'}, 628: {'name': '勇士雄鹰'}, 629: {'name': '秃鹰丫头'}, 630: {'name': '秃鹰娜'}, 631: {'name': '熔蚁兽'}, 632: {'name': '铁蚁'}, 633: {'name': '单首龙'}, 634: {'name': '双首暴龙'}, 635: {'name': '三首恶龙'}, 636: {'name': '燃烧虫'}, 637: {'name': '火神蛾'}, 638: {'name': '勾帕路翁'}, 639: {'name': '代拉基翁'}, 640: {'name': '毕力吉翁'}, 641: {'name': '龙卷云'}, 642: {'name': '雷电云'}, 643: {'name': '莱希拉姆'}, 644: {'name': '捷克罗姆'}, 645: {'name': '土地云'}, 646: {'name': '酋雷姆'}, 646001: {'name': '暗黑酋雷姆'}, 646002: {'name': '焰白酋雷姆'}, 647: {'name': '凯路迪欧'}, 648: {'name': '美洛耶塔'}, 649: {'name': '盖诺赛克特'}, 650: {'name': '哈力栗'}, 651: {'name': '胖胖哈力'}, 652: {'name': '布里卡隆'}, 653: {'name': '火狐狸'}, 654: {'name': '长尾火狐'}, 655: {'name': '妖火红狐'}, 656: {'name': '呱呱泡蛙'}, 657: {'name': '呱头蛙'}, 658: {'name': '甲贺忍蛙'}, 659: {'name': '掘掘兔'}, 660: {'name': '掘地兔'}, 661: {'name': '小箭雀'}, 662: {'name': '火箭雀'}, 663: {'name': '烈箭鹰'}, 664: {'name': '粉蝶虫'}, 665: {'name': '粉蝶蛹'}, 666: {'name': '彩粉蝶'}, 667: {'name': '小狮狮'}, 668: {'name': '火炎狮'}, 669: {'name': '花蓓蓓'}, 670: {'name': '花叶蒂'}, 671: {'name': '花洁夫人'}, 672: {'name': '坐骑小羊'}, 673: {'name': '坐骑山羊'}, 674: {'name': '顽皮熊猫'}, 675: {'name': '流氓熊猫'}, 676: {'name': '多丽米亚'}, 677: {'name': '妙喵'}, 678: {'name': '超能妙喵'}, 679: {'name': '独剑鞘'}, 680: {'name': '双剑鞘'}, 681: {'name': '坚盾剑怪'}, 682: {'name': '粉香香'}, 683: {'name': '芳香精'}, 684: {'name': '绵绵泡芙'}, 685: {'name': '胖甜妮'}, 686: {'name': '好啦鱿'}, 687: {'name': '乌贼王'}, 688: {'name': '龟脚脚'}, 689: {'name': '龟足巨铠'}, 690: {'name': '垃垃藻'}, 691: {'name': '毒藻龙'}, 692: {'name': '铁臂枪虾'}, 693: {'name': '钢炮臂虾'}, 694: {'name': '伞电蜥'}, 695: {'name': '光电伞蜥'}, 696: {'name': '宝宝暴龙'}, 697: {'name': '怪颚龙'}, 698: {'name': '冰雪龙'}, 699: {'name': '冰雪巨龙'}, 700: {'name': '仙子伊布'}, 701: {'name': '摔角鹰人'}, 702: {'name': '咚咚鼠'}, 703: {'name': '小碎钻'}, 704: {'name': '黏黏宝'}, 705: {'name': '黏美儿'}, 706: {'name': '黏美龙'}, 707: {'name': '钥圈儿'}, 708: {'name': '小木灵'}, 709: {'name': '朽木妖'}, 710: {'name': '南瓜精'}, 711: {'name': '南瓜怪人'}, 712: {'name': '冰宝'}, 713: {'name': '冰岩怪'}, 714: {'name': '嗡蝠'}, 715: {'name': '音波龙'}, 716: {'name': '哲尔尼亚斯'}, 717: {'name': '伊裴尔塔尔'}, 718: {'name': '基格尔德'}, 719: {'name': '蒂安希'}, 720: {'name': '胡帕'}, 720101: {'name': '解放胡帕'}, 721: {'name': '波尔凯尼恩'}, 722: {'name': '木木枭'}, 723: {'name': '投羽枭'}, 724: {'name': '狙射树枭'}, 725: {'name': '火斑喵'}, 726: {'name': '炎热喵'}, 727: {'name': '炽焰咆哮虎'}, 728: {'name': '球球海狮'}, 729: {'name': '花漾海狮'}, 730: {'name': '西狮海壬'}, 731: {'name': '小笃儿'}, 732: {'name': '喇叭啄鸟'}, 733: {'name': '铳嘴大鸟'}, 734: {'name': '猫鼬少'}, 735: {'name': '猫鼬探长'}, 736: {'name': '强颚鸡母虫'}, 737: {'name': '虫电宝'}, 738: {'name': '锹农炮虫'}, 739: {'name': '好胜蟹'}, 740: {'name': '好胜毛蟹'}, 741: {'name': '花舞鸟'}, 742: {'name': '萌虻'}, 743: {'name': '蝶结萌虻'}, 744: {'name': '岩狗狗'}, 745: {'name': '鬃岩狼人'}, 746: {'name': '弱丁鱼'}, 747: {'name': '好坏星'}, 748: {'name': '超坏星'}, 749: {'name': '泥驴仔'}, 750: {'name': '重泥挽马'}, 751: {'name': '滴蛛'}, 752: {'name': '滴蛛霸'}, 753: {'name': '伪螳草'}, 754: {'name': '兰螳花'}, 755: {'name': '睡睡菇'}, 756: {'name': '灯罩夜菇'}, 757: {'name': '夜盗火蜥'}, 758: {'name': '焰后蜥'}, 759: {'name': '童偶熊'}, 760: {'name': '穿着熊'}, 761: {'name': '甜竹竹'}, 762: {'name': '甜舞妮'}, 763: {'name': '甜冷美后'}, 764: {'name': '花疗环环'}, 765: {'name': '智挥猩'}, 766: {'name': '投掷猴'}, 767: {'name': '胆小虫'}, 768: {'name': '具甲武者'}, 769: {'name': '沙丘娃'}, 770: {'name': '噬沙堡爷'}, 771: {'name': '拳海参'}, 772: {'name': '属性空'}, 773: {'name': '银伴战兽'}, 774: {'name': '小陨星'}, 775: {'name': '树枕尾熊'}, 776: {'name': '爆焰龟兽'}, 777: {'name': '托戈德玛尔'}, 778: {'name': '谜拟丘'}, 779: {'name': '磨牙彩皮鱼'}, 780: {'name': '老翁龙'}, 781: {'name': '破破舵轮'}, 782: {'name': '心鳞宝'}, 783: {'name': '鳞甲龙'}, 784: {'name': '杖尾鳞甲龙'}, 785: {'name': '卡璞鸣鸣'}, 786: {'name': '卡璞蝶蝶'}, 787: {'name': '卡璞哞哞'}, 788: {'name': '卡璞鳍鳍'}, 789: {'name': '科斯莫古'}, 790: {'name': '科斯莫姆'}, 791: {'name': '索尔迦雷欧'}, 792: {'name': '露奈雅拉'}, 793: {'name': '虚吾伊德'}, 794: {'name': '爆肌蚊'}, 795: {'name': '费洛美螂'}, 796: {'name': '电束木'}, 797: {'name': '铁火辉夜'}, 798: {'name': '纸御剑'}, 799: {'name': '恶食大王'}, 800: {'name': '奈克洛兹玛'}, 800101: {'name': '黄昏之鬃'}, 800102: {'name': '拂晓之翼'}, 800103: {'name': '究极奈克洛兹玛'}, 801: {'name': '玛机雅娜'}, 802: {'name': '玛夏多'}, 803: {'name': '毒贝比'}, 804: {'name': '四颚针龙'}, 805: {'name': '垒磊石'}, 806: {'name': '砰头小丑'}, 807: {'name': '捷拉奥拉'}, 808: {'name': '美录坦'}, 809: {'name': '美录梅塔'}, 810: {'name': '敲音猴'}, 811: {'name': '啪咚猴'}, 812: {'name': '轰擂金刚猩'}, 813: {'name': '炎兔儿'}, 814: {'name': '腾蹴小将'}, 815: {'name': '闪焰王牌'}, 816: {'name': '泪眼蜥'}, 817: {'name': '变涩蜥'}, 818: {'name': '千面避役'}, 819: {'name': '贪心栗鼠'}, 820: {'name': '藏饱栗鼠'}, 821: {'name': '稚山雀'}, 822: {'name': '蓝鸦'}, 823: {'name': '钢铠鸦'}, 824: {'name': '索侦虫'}, 825: {'name': '天罩虫'}, 826: {'name': '以欧路普'}, 827: {'name': '偷儿狐'}, 828: {'name': '狐大盗'}, 829: {'name': '幼棉棉'}, 830: {'name': '白蓬蓬'}, 831: {'name': '毛辫羊'}, 832: {'name': '毛毛角羊'}, 833: {'name': '咬咬龟'}, 834: {'name': '暴噬龟'}, 835: {'name': '来电汪'}, 836: {'name': '逐电犬'}, 837: {'name': '小炭仔'}, 838: {'name': '大炭车'}, 839: {'name': '巨炭山'}, 840: {'name': '啃果虫'}, 841: {'name': '苹裹龙'}, 842: {'name': '丰蜜龙'}, 843: {'name': '沙包蛇'}, 844: {'name': '沙螺蟒'}, 845: {'name': '古月鸟'}, 846: {'name': '刺梭鱼'}, 847: {'name': '戽斗尖梭'}, 848: {'name': '毒电婴'}, 849: {'name': '颤弦蝾螈'}, 850: {'name': '烧火蚣'}, 851: {'name': '焚焰蚣'}, 852: {'name': '拳拳蛸'}, 853: {'name': '八爪武师'}, 854: {'name': '来悲茶'}, 855: {'name': '怖思壶'}, 856: {'name': '迷布莉姆'}, 857: {'name': '提布莉姆'}, 858: {'name': '布莉姆温'}, 859: {'name': '捣蛋小妖'}, 860: {'name': '诈唬魔'}, 861: {'name': '长毛巨魔'}, 862: {'name': '堵拦熊'}, 863: {'name': '喵头目'}, 864: {'name': '魔灵珊瑚'}, 865: {'name': '葱游兵'}, 866: {'name': '踏冰人偶'}, 867: {'name': '死神板'}, 868: {'name': '小仙奶'}, 869: {'name': '霜奶仙'}, 870: {'name': '列阵兵'}, 871: {'name': '啪嚓海胆'}, 872: {'name': '雪吞虫'}, 873: {'name': '雪绒蛾'}, 874: {'name': '巨石丁'}, 875: {'name': '冰砌鹅'}, 876: {'name': '爱管侍'}, 877: {'name': '莫鲁贝可'}, 878: {'name': '铜象'}, 879: {'name': '大王铜象'}, 880: {'name': '雷鸟龙'}, 881: {'name': '雷鸟海兽'}, 882: {'name': '鳃鱼龙'}, 883: {'name': '鳃鱼海兽'}, 884: {'name': '铝钢龙'}, 885: {'name': '多龙梅西亚'}, 886: {'name': '多龙奇'}, 887: {'name': '多龙巴鲁托'}, 888: {'name': '苍响'}, 889: {'name': '藏玛然特'}, 890: {'name': '无极汰那'}, 891: {'name': '熊徒弟'}, 893: {'name': '萨戮德'}, 894: {'name': '雷吉艾勒奇'}, 895: {'name': '雷吉铎拉戈'}, 896: {'name': '雪暴马'}, 897: {'name': '灵幽马'}, 898: {'name': '蕾冠王'}, 899: {'name': '诡角鹿'}, 900: {'name': '劈斧螳螂'}, 901: {'name': '月月熊'}, 902: {'name': '幽尾玄鱼'}, 903: {'name': '大狃拉'}, 904: {'name': '万针鱼'}, 905: {'name': '眷恋云'}, 906: {'name': '新叶喵'}, 907: {'name': '蒂蕾喵'}, 908: {'name': '魔幻假面喵'}, 909: {'name': '呆火鳄'}, 910: {'name': '炙烫鳄'}, 911: {'name': '骨纹巨声鳄'}, 912: {'name': '润水鸭'}, 913: {'name': '涌跃鸭'}, 914: {'name': '狂欢浪舞鸭'}, 915: {'name': '爱吃豚'}, 916: {'name': '飘香豚'}, 917: {'name': '团珠蛛'}, 918: {'name': '操陷蛛'}, 919: {'name': '豆蟋蟀'}, 920: {'name': '烈腿蝗'}, 921: {'name': '布拨'}, 922: {'name': '布土拨'}, 923: {'name': '巴布土拨'}, 924: {'name': '一对鼠'}, 925: {'name': '一家鼠'}, 926: {'name': '狗仔包'}, 927: {'name': '麻花犬'}, 928: {'name': '迷你芙'}, 929: {'name': '奥利纽'}, 930: {'name': '奥利瓦'}, 931: {'name': '怒鹦哥'}, 932: {'name': '盐石宝'}, 933: {'name': '盐石垒'}, 934: {'name': '盐石巨灵'}, 935: {'name': '炭小侍'}, 936: {'name': '红莲铠骑'}, 937: {'name': '苍炎刃鬼'}, 938: {'name': '光蚪仔'}, 939: {'name': '电肚蛙'}, 940: {'name': '电海燕'}, 941: {'name': '大电海燕'}, 942: {'name': '偶叫獒'}, 943: {'name': '獒教父'}, 944: {'name': '滋汁鼹'}, 945: {'name': '涂标客'}, 946: {'name': '纳噬草'}, 947: {'name': '怖纳噬草'}, 948: {'name': '原野水母'}, 949: {'name': '陆地水母'}, 950: {'name': '毛崖蟹'}, 951: {'name': '热辣娃'}, 952: {'name': '狠辣椒'}, 953: {'name': '虫滚泥'}, 954: {'name': '虫甲圣'}, 955: {'name': '飘飘雏'}, 956: {'name': '超能艳鸵'}, 957: {'name': '小锻匠'}, 958: {'name': '巧锻匠'}, 959: {'name': '巨锻匠'}, 960: {'name': '海地鼠'}, 961: {'name': '三海地鼠'}, 962: {'name': '下石鸟'}, 963: {'name': '波普海豚'}, 964: {'name': '海豚侠'}, 965: {'name': '噗隆隆'}, 966: {'name': '普隆隆姆'}, 967: {'name': '摩托蜥'}, 968: {'name': '拖拖蚓'}, 969: {'name': '晶光芽'}, 970: {'name': '晶光花'}, 971: {'name': '墓仔狗'}, 972: {'name': '墓扬犬'}, 973: {'name': '缠红鹤'}, 974: {'name': '走鲸'}, 975: {'name': '浩大鲸'}, 976: {'name': '轻身鳕'}, 977: {'name': '吃吼霸'}, 978: {'name': '米立龙'}, 979: {'name': '弃世猴'}, 980: {'name': '土王'}, 981: {'name': '奇麒麟'}, 982: {'name': '土龙节节'}, 983: {'name': '仆斩将军'}, 984: {'name': '雄伟牙'}, 985: {'name': '吼叫尾'}, 986: {'name': '猛恶菇'}, 987: {'name': '振翼发'}, 988: {'name': '爬地翅'}, 989: {'name': '沙铁皮'}, 990: {'name': '铁辙迹'}, 991: {'name': '铁包袱'}, 992: {'name': '铁臂膀'}, 993: {'name': '铁脖颈'}, 994: {'name': '铁毒蛾'}, 995: {'name': '铁荆棘'}, 996: {'name': '凉脊龙'}, 997: {'name': '冻脊龙'}, 998: {'name': '戟脊龙'}, 999: {'name': '索财灵'}, 1000: {'name': '赛富豪'}, 1001: {'name': '古简蜗'}, 1002: {'name': '古剑豹'}, 1003: {'name': '古鼎鹿'}, 1004: {'name': '古玉鱼'}, 1005: {'name': '轰鸣月'}, 1006: {'name': '铁武者'}, 1007: {'name': '故勒顿'}, 1008: {'name': '密勒顿'}, 1009: {'name': '波荡水'}, 1010: {'name': '铁斑叶'}, 1011: {'name': '裹蜜虫'}, 1012: {'name': '斯魔茶'}, 1013: {'name': '来悲粗茶'}, 1014: {'name': '够赞狗'}, 1015: {'name': '愿增猿'}, 1016: {'name': '吉雉鸡'}, 1017: {'name': '厄诡椪'}, 1018: {'name': '铝钢桥龙'}, 1019: {'name': '蜜集大蛇'}, 1020: {'name': '破空焰'}, 1021: {'name': '猛雷鼓'}, 1022: {'name': '铁磐岩'}, 1023: {'name': '铁头壳'}, 1024: {'name': '太乐巴戈斯'}, 1025: {'name': '桃歹郎'}};


// 技能数据
const moveNames = {1: '拍击', 2: '空手劈', 3: '连环巴掌', 4: '连续拳', 5: '百万吨重拳', 6: '聚宝功', 7: '火焰拳', 8: '冰冻拳', 9: '雷电拳', 10: '抓', 11: '夹住', 12: '极落钳', 13: '旋风刀', 14: '剑舞', 15: '居合劈', 16: '起风', 17: '翅膀攻击', 18: '吹飞', 19: '飞翔', 20: '绑紧', 21: '摔打', 22: '藤鞭', 23: '踩踏', 24: '二连踢', 25: '百万吨重踢', 26: '飞踢', 27: '回旋踢', 28: '泼沙', 29: '头锤', 30: '角撞', 31: '乱击', 32: '角钻', 33: '撞击', 34: '泰山压顶', 35: '紧束', 36: '猛撞', 37: '大闹一番', 38: '舍身冲撞', 39: '摇尾巴', 40: '毒针', 41: '双针', 42: '飞弹针', 43: '瞪眼', 44: '咬住', 45: '叫声', 46: '吼叫', 47: '唱歌', 48: '超音波', 49: '音爆', 50: '定身法', 51: '溶解液', 52: '火花', 53: '喷射火焰', 54: '白雾', 55: '水枪', 56: '水炮', 57: '冲浪', 58: '冰冻光束', 59: '暴风雪', 60: '幻象光线', 61: '泡沫光线', 62: '极光束', 63: '破坏光线', 64: '啄', 65: '啄钻', 66: '深渊翻滚', 67: '踢倒', 68: '双倍奉还', 69: '地球上投', 70: '怪力', 71: '吸取', 72: '超级吸取', 73: '寄生种子', 74: '生长', 75: '飞叶快刀', 76: '日光束', 77: '毒粉', 78: '麻痹粉', 79: '催眠粉', 80: '花瓣舞', 81: '吐丝', 82: '龙之怒', 83: '火焰旋涡', 84: '电击', 85: '十万伏特', 86: '电磁波', 87: '打雷', 88: '落石', 89: '地震', 90: '地裂', 91: '挖洞', 92: '剧毒', 93: '念力', 94: '精神强念', 95: '催眠术', 96: '瑜伽姿势', 97: '高速移动', 98: '电光一闪', 99: '愤怒', 100: '瞬间移动', 101: '黑夜魔影', 102: '模仿', 103: '刺耳声', 104: '影子分身', 105: '自我再生', 106: '变硬', 107: '变小', 108: '烟幕', 109: '奇异之光', 110: '缩入壳中', 111: '变圆', 112: '屏障', 113: '光墙', 114: '黑雾', 115: '反射壁', 116: '聚气', 117: '忍耐', 118: '挥指', 119: '鹦鹉学舌', 120: '玉石俱碎', 121: '炸蛋', 122: '舌舔', 123: '浊雾', 124: '污泥攻击', 125: '骨棒', 126: '大字爆炎', 127: '攀瀑', 128: '贝壳夹击', 129: '高速星星', 130: '火箭头锤', 131: '尖刺加农炮', 132: '缠绕', 133: '瞬间失忆', 134: '折弯汤匙', 135: '生蛋', 136: '飞膝踢', 137: '大蛇瞪眼', 138: '食梦', 139: '毒瓦斯', 140: '投球', 141: '汲取', 142: '恶魔之吻', 143: '神鸟猛击', 144: '变身', 145: '泡沫', 146: '迷昏拳', 147: '蘑菇孢子', 148: '闪光', 149: '精神波', 150: '跃起', 151: '溶化', 152: '蟹钳锤', 153: '大爆炸', 154: '乱抓', 155: '骨头回力镖', 156: '睡觉', 157: '岩崩', 158: '终结门牙', 159: '棱角化', 160: '纹理', 161: '三重攻击', 162: '愤怒门牙', 163: '劈开', 164: '替身', 165: '挣扎', 166: '写生', 167: '三连踢', 168: '小偷', 169: '蛛网', 170: '心之眼', 171: '恶梦', 172: '火焰轮', 173: '打鼾', 174: '咒术', 175: '抓狂', 176: '纹理2', 177: '气旋攻击', 178: '棉孢子', 179: '绝处逢生', 180: '怨恨', 181: '细雪', 182: '守住', 183: '音速拳', 184: '可怕面孔', 185: '出奇一击', 186: '天使之吻', 187: '腹鼓', 188: '污泥炸弹', 189: '掷泥', 190: '章鱼桶炮', 191: '撒菱', 192: '电磁炮', 193: '识破', 194: '同命', 195: '终焉之歌', 196: '冰冻之风', 197: '看穿', 198: '骨棒乱打', 199: '锁定', 200: '逆鳞', 201: '沙暴', 202: '终极吸取', 203: '挺住', 204: '撒娇', 205: '滚动', 206: '点到为止', 207: '虚张声势', 208: '喝牛奶', 209: '电光', 210: '连斩', 211: '钢翼', 212: '黑色目光', 213: '迷人', 214: '梦话', 215: '治愈铃声', 216: '报恩', 217: '礼物', 218: '迁怒', 219: '神秘守护', 220: '分担痛楚', 221: '神圣之火', 222: '震级', 223: '爆裂拳', 224: '超级角击', 225: '龙息', 226: '接棒', 227: '再来一次', 228: '追打', 229: '高速旋转', 230: '甜甜香气', 231: '铁尾', 232: '金属爪', 233: '借力摔', 234: '晨光', 235: '光合作用', 236: '月光', 237: '觉醒力量', 238: '十字劈', 239: '龙卷风', 240: '求雨', 241: '大晴天', 242: '咬碎', 243: '镜面反射', 244: '自我暗示', 245: '神速', 246: '原始之力', 247: '暗影球', 248: '预知未来', 249: '碎岩', 250: '潮旋', 251: '围攻', 252: '击掌奇袭', 253: '吵闹', 254: '蓄力', 255: '喷出', 256: '吞下', 257: '热风', 258: '冰雹', 259: '无理取闹', 260: '吹捧', 261: '磷火', 262: '临别礼物', 263: '硬撑', 264: '真气拳', 265: '清醒', 266: '看我嘛', 267: '自然之力', 268: '充电', 269: '挑衅', 270: '帮助', 271: '戏法', 272: '扮演', 273: '祈愿', 274: '借助', 275: '扎根', 276: '蛮力', 277: '魔法反射', 278: '回收利用', 279: '报复', 280: '劈瓦', 281: '哈欠', 282: '拍落', 283: '蛮干', 284: '喷火', 285: '特性互换', 286: '封印', 287: '焕然一新', 288: '怨念', 289: '化为己用', 290: '秘密之力', 291: '潜水', 292: '猛推', 293: '保护色', 294: '萤火', 295: '洁净光芒', 296: '薄雾球', 297: '羽毛舞', 298: '摇晃舞', 299: '火焰踢', 300: '玩泥巴', 301: '冰球', 302: '尖刺臂', 303: '偷懒', 304: '巨声', 305: '剧毒牙', 306: '撕裂爪', 307: '爆炸烈焰', 308: '加农水炮', 309: '彗星拳', 310: '惊吓', 311: '气象球', 312: '芳香治疗', 313: '假哭', 314: '空气利刃', 315: '过热', 316: '气味侦测', 317: '岩石封锁', 318: '银色旋风', 319: '金属音', 320: '草笛', 321: '挠痒', 322: '宇宙力量', 323: '喷水', 324: '信号光束', 325: '暗影拳', 326: '神通力', 327: '冲天拳', 328: '流沙深渊', 329: '绝对零度', 330: '浊流', 331: '种子机关枪', 332: '燕返', 333: '冰锥', 334: '铁壁', 335: '挡路', 336: '长嚎', 337: '龙爪', 338: '疯狂植物', 339: '健美', 340: '弹跳', 341: '泥巴射击', 342: '毒尾', 343: '渴望', 344: '伏特攻击', 345: '魔法叶', 346: '玩水', 347: '冥想', 348: '叶刃', 349: '龙之舞', 350: '岩石爆击', 351: '电击波', 352: '水之波动', 353: '破灭之愿', 354: '精神突进', 355: '羽栖', 356: '重力', 357: '奇迹之眼', 358: '唤醒巴掌', 359: '臂锤', 360: '陀螺球', 361: '治愈之愿', 362: '盐水', 363: '自然之恩', 364: '佯攻', 365: '啄食', 366: '顺风', 367: '点穴', 368: '金属爆炸', 369: '急速折返', 370: '近身战', 371: '以牙还牙', 372: '恶意追击', 373: '查封', 374: '投掷', 375: '精神转移', 376: '王牌', 377: '回复封锁', 378: '绞紧', 379: '力量戏法', 380: '胃液', 381: '幸运咒语', 382: '抢先一步', 383: '仿效', 384: '力量互换', 385: '防守互换', 386: '惩罚', 387: '珍藏', 388: '烦恼种子', 389: '突袭', 390: '毒菱', 391: '心灵互换', 392: '水流环', 393: '电磁飘浮', 394: '闪焰冲锋', 395: '发劲', 396: '波导弹', 397: '岩石打磨', 398: '毒击', 399: '恶之波动', 400: '暗袭要害', 401: '水流尾', 402: '种子炸弹', 403: '空气之刃', 404: '十字剪', 405: '虫鸣', 406: '龙之波动', 407: '龙之俯冲', 408: '力量宝石', 409: '吸取拳', 410: '真空波', 411: '真气弹', 412: '能量球', 413: '勇鸟猛攻', 414: '大地之力', 415: '掉包', 416: '终极冲击', 417: '诡计', 418: '子弹拳', 419: '雪崩', 420: '冰砾', 421: '暗影爪', 422: '雷电牙', 423: '冰冻牙', 424: '火焰牙', 425: '影子偷袭', 426: '泥巴炸弹', 427: '精神利刃', 428: '意念头锤', 429: '镜光射击', 430: '加农光炮', 431: '攀岩', 432: '清除浓雾', 433: '戏法空间', 434: '流星群', 435: '放电', 436: '喷烟', 437: '飞叶风暴', 438: '强力鞭打', 439: '岩石炮', 440: '十字毒刃', 441: '垃圾射击', 442: '铁头', 443: '磁铁炸弹', 444: '尖石攻击', 445: '诱惑', 446: '隐形岩', 447: '打草结', 448: '喋喋不休', 449: '制裁光砾', 450: '虫咬', 451: '充电光束', 452: '木槌', 453: '水流喷射', 454: '攻击指令', 455: '防御指令', 456: '回复指令', 457: '双刃头锤', 458: '二连击', 459: '时光咆哮', 460: '亚空裂斩', 461: '新月舞', 462: '捏碎', 463: '熔岩风暴', 464: '暗黑洞', 465: '种子闪光', 466: '奇异之风', 467: '暗影潜袭', 468: '磨爪', 469: '广域防守', 470: '防守平分', 471: '力量平分', 472: '奇妙空间', 473: '精神冲击', 474: '毒液冲击', 475: '身体轻量化', 476: '愤怒粉', 477: '意念移物', 478: '魔法空间', 479: '击落', 480: '山岚摔', 481: '烈焰溅射', 482: '污泥波', 483: '蝶舞', 484: '重磅冲撞', 485: '同步干扰', 486: '电球', 487: '浸水', 488: '蓄能焰袭', 489: '盘蜷', 490: '下盘踢', 491: '酸液炸弹', 492: '移花接木', 493: '单纯光束', 494: '找伙伴', 495: '您先请', 496: '轮唱', 497: '回声', 498: '逐步击破', 499: '清除之烟', 500: '辅助力量', 501: '快速防守', 502: '交换场地', 503: '热水', 504: '破壳', 505: '治愈波动', 506: '祸不单行', 507: '自由落体', 508: '换挡', 509: '巴投', 510: '烧净', 511: '延后', 512: '杂技', 513: '镜面属性', 514: '报仇', 515: '搏命', 516: '传递礼物', 517: '烈火深渊', 518: '水之誓约', 519: '火之誓约', 520: '草之誓约', 521: '伏特替换', 522: '虫之抵抗', 523: '重踏', 524: '冰息', 525: '龙尾', 526: '自我激励', 527: '电网', 528: '疯狂伏特', 529: '直冲钻', 530: '二连劈', 531: '爱心印章', 532: '木角', 533: '圣剑', 534: '贝壳刃', 535: '高温重压', 536: '青草搅拌器', 537: '疯狂滚压', 538: '棉花防守', 539: '暗黑爆破', 540: '精神击破', 541: '扫尾拍打', 542: '暴风', 543: '爆炸头突击', 544: '齿轮飞盘', 545: '火焰弹', 546: '高科技光炮', 547: '古老之歌', 548: '神秘之剑', 549: '冰封世界', 550: '雷击', 551: '青焰', 552: '火之舞', 553: '冰冻伏特', 554: '极寒冷焰', 555: '大声咆哮', 556: '冰柱坠击', 557: 'V热焰', 558: '交错火焰', 559: '交错闪电', 1000: '不给糖就捣乱', 1001: '炽热梦境', 1004: '残酷掠夺', 1006: '幻影打击', 1007: '摄魂术', 1008: '狂暴冲击', 1009: '咔砰!', 1010: '精灵驱逐', 1011: '贪婪吞咽', 1012: '幽灵视角', 1013: '瘴气', 1014: '下拽', 1015: '噬灭', 1017: '蹦得再高点!', 1018: '蹦得真高啊!'};

// 时段名称
const alphaTimeNames = {
    1: "清晨", // 5:00-8:59
    2: "上午", // 9:00-11:59
    3: "中午", // 12:00-13:59
    4: "下午", // 14:00-16:59
    5: "傍晚", // 17:00-19:59
    6: "晚上", // 20:00-22:59
    7: "深夜"  // 23:00-4:59
};

// 添加时间段判断函数
function getAlphaTimeId(hour) {
    if (hour >= 5 && hour < 9) return 1;
    if (hour >= 9 && hour < 12) return 2;
    if (hour >= 12 && hour < 14) return 3;
    if (hour >= 14 && hour < 17) return 4;
    if (hour >= 17 && hour < 20) return 5;
    if (hour >= 20 && hour < 23) return 6;
    return 7; // 23:00-4:59
}

// 格式化时间
function formatTime(hour, minute) {
    return `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
}

// 获取持续时间（分钟）
function getDuration(startHour, startMinute, endHour, endMinute) {
    const startTotal = startHour * 60 + startMinute;
    const endTotal = endHour * 60 + endMinute;
    return endTotal - startTotal;
}

// 计算剩余时间
function getRemainingTime(endHour, endMinute) {
    const now = new Date();
    const end = new Date();
    end.setHours(endHour, endMinute, 0);

    if (end < now) {
        return {text: "已结束", status: "ended"};
    }

    const diff = end - now;
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));

    let statusClass = "active";
    if (diff < 15 * 60 * 1000) { // 少于15分钟
        statusClass = "urgent";
    }

    return {
        text: `剩余 ${hours}小时 ${minutes}分钟`,
        status: statusClass
    };
}

// 检查是否活跃
function isActive(endHour, endMinute) {
    const now = new Date();
    const end = new Date();
    end.setHours(endHour, endMinute, 0);
    return end > now;
}

// 更新统计数据
function updateStats(monsters) {
    const activeCount = monsters.filter(m =>
        isActive(m.endHour, m.endMinute)
    ).length;
    document.getElementById('active-count').textContent = activeCount;
    document.getElementById('total-count').textContent = monsters.length;
    const locations = {};
    monsters.forEach(m => {
        const region = regionNames[m.regionId] || "未知地区";
        locations[`${region} ${m.locationName}`] = (locations[m.locationName] || 0) + 1;
    });

    const commonLocation = Object.keys(locations).sort((a, b) =>
        locations[b] - locations[a]
    )[0] || "无数据";

    document.getElementById('common-location').textContent = commonLocation;
}

// 渲染宝可梦卡片
function renderMonsterCards(monsters) {
    const container = document.getElementById("monster-container");

    if (!monsters || monsters.length === 0) {
        container.innerHTML = '<div class="no-data">暂无报点数据</div>';
        return;
    }

    container.innerHTML = monsters.map(monster => {
        const pokemon = pokemonTypes[monster.monsterId] || {
            name: `未知宝可梦(#${monster.monsterId})`,
            type: "normal",
            img: "",
            ability: "未知"
        };
        const startTime = formatTime(monster.startHour, monster.startMinute);
        const endTime = formatTime(monster.endHour, monster.endMinute);
        const duration = getDuration(monster.startHour, monster.startMinute, monster.endHour, monster.endMinute);
        const remaining = getRemainingTime(monster.endHour, monster.endMinute);
        const regionName = regionNames[monster.regionId] || "未知地区";

        // 确定状态类和图标
        let statusClass = "active";
        let statusIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path><polyline points="22 4 12 14.01 9 11.01"></polyline></svg>`;
        let statusColor = "#2ecc71";

        if (remaining.status === "ended") {
            statusClass = "ended";
            statusIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>`;
            statusColor = "#e74c3c";
        } else if (remaining.status === "urgent") {
            statusClass = "urgent";
            statusIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12.01" y2="16"></line></svg>`;
            statusColor = "#f39c12";
        }

        return `
        <div class="monster-card">
            <div class="monster-header type-${pokemon.type}">
                <div class="monster-img">
                    <img src="${pokemon.img}" alt="${pokemon.name}" onerror="this.src='https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/items/poke-ball.png'">
                </div>
                <div class="monster-info">
                    <div class="monster-name">${pokemon.name}</div>
                    <div class="monster-location">
                        <span>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M20 10c0 6-8 12-8 12s-8-6-8-12a8 8 0 0 1 16 0z"></path>
                                <circle cx="12" cy="10" r="3"></circle>
                            </svg>
                            ${monster.locationName}
                        </span>
                        <span class="region-badge">${regionName}</span>
                    </div>
                </div>
                <div class="monster-time">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <circle cx="12" cy="12" r="10"></circle>
                        <polyline points="12 6 12 12 16 14"></polyline>
                    </svg>
                    ${startTime} - ${endTime}
                </div>
            </div>

          <div class="monster-details">
            <div class="monster-status" style="background-color: ${statusColor}20; border-left-color: ${statusColor};">
              <div class="status-icon" style="color: ${statusColor};">
                ${statusIcon}
              </div>
              <div class="status-text">${remaining.text}</div>
            </div>

            <div class="monster-meta">
              <div class="monster-meta-item">
                <div class="monster-meta-label">持续时间</div>
                <div class="monster-meta-value">${duration}分钟</div>
              </div>
              <div class="monster-meta-item">
                <div class="monster-meta-label">时段</div>
                <div class="monster-meta-value">${alphaTimeNames[getAlphaTimeId(monster.endHour)] || "未知"}</div>
              </div>
              <div class="monster-meta-item">
                <div class="monster-meta-label">特性</div>
                <div class="monster-meta-value">${pokemon.ability}</div>
              </div>
            </div>

            <div class="monster-moves">
              <div class="monster-moves-title">技能列表</div>
              <div class="move-grid">
                <div class="move-item">${moveNames[monster.move1Id] || `技能#${monster.move1Id}`}</div>
                <div class="move-item">${moveNames[monster.move2Id] || `技能#${monster.move2Id}`}</div>
                <div class="move-item">${moveNames[monster.move3Id] || `技能#${monster.move3Id}`}</div>
                <div class="move-item">${moveNames[monster.move4Id] || `技能#${monster.move4Id}`}</div>
              </div>
            </div>
          </div>

          <div class="monster-footer">
            <div class="time-badge" style="
                background: linear-gradient(135deg, #3a5dd9, #00b4d8);
                color: white;
                padding: 6px 12px;
                border-radius: 6px;
                font-size: 0.85rem;
                font-weight: 600;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                text-shadow: 0 1px 2px rgba(0,0,0,0.1);
            ">${monster.date}</div>
            <div class="reporter">
                <div class="reporter-avatar">
                    <img src="${monster.itemCosmeticConfigUrl}" alt="${monster.userIgn}" style="
                        width: 100%;
                        height: 100%;
                        object-fit: cover;
                        border-radius: 50%;
                    ">
                </div>
                <div class="reported-by">报点人: ${monster.userIgn}</div>
            </div>
        </div>
        </div>
      `;
    }).join('');
}

// 渲染时间分布图表
function renderTimeDistributionChart(monsters) {
    const ctx = document.getElementById('timeDistributionChart').getContext('2d');

    // 修改标签显示，加入地区信息
    const labels = monsters.map(m => {
        const pokemon = pokemonTypes[m.monsterId] || {name: `未知(#${m.monsterId})`};
        return pokemon.name;
    });

    const startTimes = monsters.map(m => m.startHour * 60 + m.startMinute);

    // 创建图表
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: '出现时间 (分钟)',
                data: startTimes,
                backgroundColor: monsters.map(m => {
                    const pokemon = pokemonTypes[m.monsterId] || {type: "normal"};
                    return getTypeColor(pokemon.type, 0.7);
                }),
                borderColor: monsters.map(m => {
                    const pokemon = pokemonTypes[m.monsterId] || {type: "normal"};
                    return getTypeColor(pokemon.type, 1);
                }),
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 24 * 60,
                    ticks: {
                        callback: function (value) {
                            const hours = Math.floor(value / 60);
                            const minutes = value % 60;
                            return formatTime(hours, minutes);
                        },
                        stepSize: 120
                    },
                    title: {
                        display: true,
                        text: '出现时间'
                    }
                },
                x: {
                    title: {
                        display: true,
                        text: '宝可梦'
                    }
                }
            },
            plugins: {
                tooltip: {
                    callbacks: {
                        title: function (context) {
                            const index = context[0].dataIndex;
                            const m = monsters[index];
                            const pokemon = pokemonTypes[m.monsterId] || {name: `未知(#${m.monsterId})`};
                            const region = regionNames[m.regionId] || "未知地区";
                            return `${pokemon.name} (${region}-${m.locationName})`;
                        },
                        label: function (context) {
                            const value = context.parsed.y;
                            const hours = Math.floor(value / 60);
                            const minutes = value % 60;
                            return `出现时间: ${formatTime(hours, minutes)}`;
                        },
                        afterLabel: function (context) {
                            const index = context.dataIndex;
                            const m = monsters[index];
                            const endTime = formatTime(m.endHour, m.endMinute);
                            const duration = getDuration(m.startHour, m.startMinute, m.endHour, m.endMinute);
                            return [
                                `结束时间: ${endTime}`,
                                `持续时间: ${duration}分钟`,
                                `报点人: ${m.userIgn}`
                            ];
                        }
                    }
                }
            }
        }
    });
}

// 渲染持续时间图表
function renderDurationChart(monsters) {
    const ctx = document.getElementById('durationChart').getContext('2d');

    // 提取数据
    const durations = monsters.map(m => {
        return getDuration(m.startHour, m.startMinute, m.endHour, m.endMinute);
    });

    // 修改标签显示，加入地区信息
    const labels = monsters.map(m => {
        const pokemon = pokemonTypes[m.monsterId] || {name: `未知(#${m.monsterId})`};
        return pokemon.name;
    });

    // 创建图表 - 修复horizontalBar的问题，使用bar类型并设置indexAxis为'y'
    new Chart(ctx, {
        type: 'bar', // 改用标准bar类型
        data: {
            labels: labels,
            datasets: [{
                label: '持续时间 (分钟)',
                data: durations,
                backgroundColor: monsters.map(m => {
                    const pokemon = pokemonTypes[m.monsterId] || {type: "normal"};
                    return getTypeColor(pokemon.type, 0.7);
                }),
                borderColor: monsters.map(m => {
                    const pokemon = pokemonTypes[m.monsterId] || {type: "normal"};
                    return getTypeColor(pokemon.type, 1);
                }),
                borderWidth: 1
            }]
        },
        options: {
            indexAxis: 'y', // 水平方向的条形图
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                x: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: '持续时间 (分钟)'
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: '宝可梦'
                    }
                }
            },
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            return `持续时间: ${context.parsed.x} 分钟`;
                        },
                        afterLabel: function (context) {
                            const index = context.dataIndex;
                            const m = monsters[index];
                            const startTime = formatTime(m.startHour, m.startMinute);
                            const endTime = formatTime(m.endHour, m.endMinute);
                            return [
                                `时间段: ${startTime} - ${endTime}`,
                                `报点人: ${m.userIgn}`
                            ];
                        }
                    }
                }
            }
        }
    });
}

// 更新计时器状态
function updateTimerStatus(monsters) {
    const now = new Date();
    const container = document.getElementById('timer-status');

    // 查找当前正在进行的事件
    const activeMonsters = monsters.filter(m => {
        const end = new Date();
        end.setHours(m.endHour, m.endMinute, 0);
        return end > now;
    });

    if (activeMonsters.length === 0) {
        container.innerHTML = `
    <div class="timer-icon" style="background-color: #e74c3c;">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="8" x2="12" y2="12"/><line x1="12" y1="16" x2="12.01" y2="16"/></svg>
    </div>
    <div class="timer-info">
      <div class="timer-title">当前没有进行中的头目</div>
      <div class="timer-subtitle">最近的报点已经结束，请等待新的报点信息</div>
    </div>
  `;
        // 修改边框颜色
        container.style.borderLeftColor = "#e74c3c";
        return;
    }

    // 按结束时间排序，获取最快结束的事件
    activeMonsters.sort((a, b) => {
        const endA = a.endHour * 60 + a.endMinute;
        const endB = b.endHour * 60 + b.endMinute;
        return endA - endB;
    });

    const nextEnd = activeMonsters[0];
    const pokemon = pokemonTypes[nextEnd.monsterId] || {name: `未知宝可梦(#${nextEnd.monsterId})`};
    const region = regionNames[nextEnd.regionId] || "未知地区";
    const remaining = getRemainingTime(nextEnd.endHour, nextEnd.endMinute);
    const startTime = formatTime(nextEnd.startHour, nextEnd.startMinute);
    const endTime = formatTime(nextEnd.endHour, nextEnd.endMinute);

    let timerColor = "#2ecc71";
    let statusIcon = `
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="filter: drop-shadow(0 2px 3px rgba(0,0,0,0.2));">
            <circle cx="12" cy="12" r="8"/>
            <path d="M12 8v4l3 1.5"/>
        </svg>`;
    if (remaining.status === "urgent") {
        timerColor = "#f39c12";
        statusIcon = `
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="filter: drop-shadow(0 2px 3px rgba(0,0,0,0.2));">
                <path d="M12 8v4M12 16h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>`;
    }

    container.innerHTML = `
        <div class="timer-icon" style="background: linear-gradient(135deg, ${timerColor}, ${timerColor}dd); box-shadow: 0 3px 10px ${timerColor}40;">
            ${statusIcon}
        </div>
        <div class="timer-info">
            <div class="timer-title" style="font-size: 1.25rem; margin-bottom: 8px;">
                <span style="color: ${timerColor}; font-weight: bold; text-shadow: 0 1px 2px ${timerColor}20;">${pokemon.name}</span>
                正在
                <span style="color: ${timerColor}; font-weight: bold; text-shadow: 0 1px 2px ${timerColor}20;">${region}-${nextEnd.locationName}</span>
                出现！
            </div>
            <div class="timer-subtitle" style="display: flex; flex-direction: column; gap: 6px; opacity: 0.9;">
                <div style="display: flex; align-items: center; gap: 6px;">
                    <span style="color: ${timerColor};">⏰</span>
                    出现时间：${startTime} - ${endTime}
                </div>
                <div style="display: flex; align-items: center; gap: 6px; color: ${timerColor}; font-weight: 600;">
                    <span>⚠️</span>
                    ${remaining.text}
                </div>
                <div style="display: flex; align-items: center; gap: 6px;">
                    <span style="color: ${timerColor};">👤</span>
                    报点人：${nextEnd.userIgn}
                </div>
            </div>
        </div>
    `;

    // 修改容器样式
    container.style.borderLeftColor = timerColor;
    container.style.borderLeftWidth = "5px";
    container.style.background = `linear-gradient(to right, ${timerColor}08, white)`;
    container.style.boxShadow = "0 4px 15px rgba(0,0,0,0.05)";
}

// 获取宝可梦类型颜色
function getTypeColor(type, alpha = 1) {
    const colors = {
        normal: `rgba(168, 168, 120, ${alpha})`,
        fire: `rgba(240, 128, 48, ${alpha})`,
        water: `rgba(104, 144, 240,${alpha})`,
        grass: `rgba(120, 200, 80, ${alpha})`,
        electric: `rgba(248, 208, 48, ${alpha})`,
        ice: `rgba(152, 216, 216, ${alpha})`,
        fighting: `rgba(192, 48, 40, ${alpha})`,
        poison: `rgba(160, 64, 160, ${alpha})`,
        ground: `rgba(224, 192, 104, ${alpha})`,
        flying: `rgba(168, 144, 240, ${alpha})`,
        psychic: `rgba(248, 88, 136, ${alpha})`,
        bug: `rgba(168, 184, 32, ${alpha})`,
        rock: `rgba(184, 160, 56, ${alpha})`,
        ghost: `rgba(112, 88, 152, ${alpha})`,
        dragon: `rgba(112, 56, 248, ${alpha})`,
        dark: `rgba(112, 88, 72, ${alpha})`,
        steel: `rgba(184, 184, 208, ${alpha})`,
        fairy: `rgba(238, 153, 172, ${alpha})`
    };

    return colors[type] || `rgba(100, 100, 100, ${alpha})`;
}

// 修改初始化函数
async function initializePage() {
    try {
        let data = await fetchMonsterData();

        // 如果请求失败，使用默认数据
        if (!data || data.length === 0) {
            console.log('使用默认数据');
            data = monsterData;
        }

        // 清除之前的图表实例（如果存在）
        const timeChartInstance = Chart.getChart('timeDistributionChart');
        const durationChartInstance = Chart.getChart('durationChart');
        if (timeChartInstance) timeChartInstance.destroy();
        if (durationChartInstance) durationChartInstance.destroy();

        // 更新所有视图
        renderMonsterCards(data);
        renderTimeDistributionChart(data);
        renderDurationChart(data);
        updateTimerStatus(data);
        updateStats(data);

    } catch (error) {
        console.error('初始化失败:', error);
        // 出错时使用默认数据
        renderMonsterCards(monsterData);
        renderTimeDistributionChart(monsterData);
        renderDurationChart(monsterData);
        updateTimerStatus(monsterData);
        updateStats(monsterData);
    }
}

// 修改定时刷新逻辑
let refreshInterval;

function startRefreshInterval() {
    if (refreshInterval) {
        clearInterval(refreshInterval);
    }

    refreshInterval = setInterval(async () => {
        const data = await fetchMonsterData();
        if (data) {
            // 清除之前的图表实例
            const timeChartInstance = Chart.getChart('timeDistributionChart');
            const durationChartInstance = Chart.getChart('durationChart');
            if (timeChartInstance) timeChartInstance.destroy();
            if (durationChartInstance) durationChartInstance.destroy();

            // 更新所有视图
            updateTimerStatus(data);
            renderMonsterCards(data);
            renderTimeDistributionChart(data);
            renderDurationChart(data);
            updateStats(data);
        }
    }, 60000); // 每分钟检查一次，但实际刷新由缓存机制控制
}

// 页面加载完成后初始化
document.addEventListener('DOMContentLoaded', () => {
    initializePage();
    startRefreshInterval();
    const githubLink = document.querySelector('.developer-link');
    githubLink.addEventListener('click', function(e) {
        e.preventDefault(); // 阻止默认行为
        const newWindow = window.open(this.href, '_blank');
        if (newWindow === null) {
            window.location.href = this.href;
        }
    });
});

// 页面隐藏时停止刷新，显示时恢复刷新
document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
        if (refreshInterval) {
            clearInterval(refreshInterval);
        }
    } else {
        initializePage();
        startRefreshInterval();
    }
});
